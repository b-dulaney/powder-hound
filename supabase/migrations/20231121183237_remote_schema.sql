
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pg_cron" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pg_net" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

ALTER SCHEMA "public" OWNER TO "postgres";

CREATE EXTENSION IF NOT EXISTS "plv8" WITH SCHEMA "pg_catalog";

CREATE EXTENSION IF NOT EXISTS "http" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE OR REPLACE FUNCTION "public"."get_all_weather"() RETURNS "json"
    LANGUAGE "plpgsql"
    AS $$

declare mviews record;
begin
for mviews in 
  select mountain_id, lat, lon from mountains
  order by 1
loop
select get_daily_weather(mount.lat, mount.lon) as json_result;
return json_result;
end loop;
end;
$$;

ALTER FUNCTION "public"."get_all_weather"() OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."get_daily_weather"("lat" real, "lon" real) RETURNS "json"
    LANGUAGE "plpgsql"
    AS $$begin
  RETURN(select content::json
  from http_get(concat('https://api.openweathermap.org/data/2.5/onecall?lat=', lat, '&lon=', lon, '&units=imperial&exclude=minutely,hourly&appid=3a43dad25de3dbb7d2b839d150861147')));

  end;$$;

ALTER FUNCTION "public"."get_daily_weather"("lat" real, "lon" real) OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."conditions" (
    "condition_id" smallint NOT NULL,
    "mountain_id" smallint,
    "current_temp" numeric,
    "daily_low" numeric,
    "daily_high" numeric,
    "snow_forecast_48hrs" numeric,
    "accumulation_24hrs" numeric,
    "accumulation_5_days" numeric,
    "last_updated" timestamp with time zone DEFAULT "now"()
);

ALTER TABLE "public"."conditions" OWNER TO "postgres";

ALTER TABLE "public"."conditions" ALTER COLUMN "condition_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."conditions_condition_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."daily_forecasts" (
    "id" bigint NOT NULL,
    "mountain_id" smallint,
    "current_temp" smallint,
    "daily_high" smallint,
    "daily_low" smallint,
    "feels_like" smallint,
    "uv_index" smallint,
    "wind_speed" smallint,
    "snow_today" real,
    "snow_tomorrow" integer,
    "weather_desc" character varying,
    "weather_code" smallint
);

ALTER TABLE "public"."daily_forecasts" OWNER TO "postgres";

ALTER TABLE "public"."daily_forecasts" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."daily_forecasts_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."mountains" (
    "mountain_id" smallint NOT NULL,
    "display_name" "text",
    "lat" real,
    "lon" real,
    "country" "text",
    "state_province" "text",
    "region" "text"
);

ALTER TABLE "public"."mountains" OWNER TO "postgres";

ALTER TABLE "public"."mountains" ALTER COLUMN "mountain_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."mountains_mountain_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."profiles" (
    "id" "uuid" NOT NULL,
    "updated_at" timestamp with time zone,
    "username" "text",
    "avatar_url" "text",
    "website" "text",
    "phone_number" character varying,
    CONSTRAINT "username_length" CHECK (("char_length"("username") >= 3))
);

ALTER TABLE "public"."profiles" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."snow_accumulation" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "mountain_id" smallint,
    "date" "date",
    "precip_total" real
);

ALTER TABLE "public"."snow_accumulation" OWNER TO "postgres";

ALTER TABLE "public"."snow_accumulation" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."snow_accumulation_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."weekly_forecasts" (
    "id" bigint NOT NULL,
    "mountain_id" smallint,
    "date" "date",
    "daily_high" smallint,
    "daily_low" smallint,
    "uv_index" smallint,
    "wind_speed" smallint,
    "snow" real,
    "weather_desc" character varying,
    "weather_code" smallint
);

ALTER TABLE "public"."weekly_forecasts" OWNER TO "postgres";

ALTER TABLE "public"."weekly_forecasts" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."weekly_forecasts_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."conditions"
    ADD CONSTRAINT "conditions_pkey" PRIMARY KEY ("condition_id");

ALTER TABLE ONLY "public"."daily_forecasts"
    ADD CONSTRAINT "daily_forecasts_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."mountains"
    ADD CONSTRAINT "mountains_pkey" PRIMARY KEY ("mountain_id");

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_username_key" UNIQUE ("username");

ALTER TABLE ONLY "public"."snow_accumulation"
    ADD CONSTRAINT "snow_accumulation_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."weekly_forecasts"
    ADD CONSTRAINT "weekly_forecasts_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."conditions"
    ADD CONSTRAINT "conditions_mountain_id_fkey" FOREIGN KEY ("mountain_id") REFERENCES "public"."mountains"("mountain_id");

ALTER TABLE ONLY "public"."daily_forecasts"
    ADD CONSTRAINT "daily_forecasts_mountain_id_fkey" FOREIGN KEY ("mountain_id") REFERENCES "public"."mountains"("mountain_id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id");

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_phone_number_fkey" FOREIGN KEY ("phone_number") REFERENCES "auth"."users"("phone");

ALTER TABLE ONLY "public"."snow_accumulation"
    ADD CONSTRAINT "snow_accumulation_mountain_id_fkey" FOREIGN KEY ("mountain_id") REFERENCES "public"."mountains"("mountain_id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."weekly_forecasts"
    ADD CONSTRAINT "weekly_forecasts_mountain_id_fkey" FOREIGN KEY ("mountain_id") REFERENCES "public"."mountains"("mountain_id") ON DELETE CASCADE;

CREATE POLICY "Public profiles are viewable by everyone." ON "public"."profiles" FOR SELECT USING (true);

CREATE POLICY "Users can insert their own profile." ON "public"."profiles" FOR INSERT WITH CHECK (("auth"."uid"() = "id"));

CREATE POLICY "Users can update own profile." ON "public"."profiles" FOR UPDATE USING (("auth"."uid"() = "id"));

ALTER TABLE "public"."daily_forecasts" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."profiles" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."snow_accumulation" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."weekly_forecasts" ENABLE ROW LEVEL SECURITY;

REVOKE USAGE ON SCHEMA "public" FROM PUBLIC;
GRANT ALL ON SCHEMA "public" TO PUBLIC;
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

REVOKE ALL ON FUNCTION "pg_catalog"."plv8_info"() FROM "supabase_admin";
GRANT ALL ON FUNCTION "pg_catalog"."plv8_info"() TO "postgres";

GRANT ALL ON FUNCTION "public"."get_all_weather"() TO "anon";
GRANT ALL ON FUNCTION "public"."get_all_weather"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."get_all_weather"() TO "service_role";

GRANT ALL ON FUNCTION "public"."get_daily_weather"("lat" real, "lon" real) TO "anon";
GRANT ALL ON FUNCTION "public"."get_daily_weather"("lat" real, "lon" real) TO "authenticated";
GRANT ALL ON FUNCTION "public"."get_daily_weather"("lat" real, "lon" real) TO "service_role";

GRANT ALL ON TABLE "public"."conditions" TO "anon";
GRANT ALL ON TABLE "public"."conditions" TO "authenticated";
GRANT ALL ON TABLE "public"."conditions" TO "service_role";

GRANT ALL ON SEQUENCE "public"."conditions_condition_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."conditions_condition_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."conditions_condition_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."daily_forecasts" TO "anon";
GRANT ALL ON TABLE "public"."daily_forecasts" TO "authenticated";
GRANT ALL ON TABLE "public"."daily_forecasts" TO "service_role";

GRANT ALL ON SEQUENCE "public"."daily_forecasts_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."daily_forecasts_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."daily_forecasts_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."mountains" TO "anon";
GRANT ALL ON TABLE "public"."mountains" TO "authenticated";
GRANT ALL ON TABLE "public"."mountains" TO "service_role";

GRANT ALL ON SEQUENCE "public"."mountains_mountain_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."mountains_mountain_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."mountains_mountain_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."profiles" TO "anon";
GRANT ALL ON TABLE "public"."profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."profiles" TO "service_role";

GRANT ALL ON TABLE "public"."snow_accumulation" TO "anon";
GRANT ALL ON TABLE "public"."snow_accumulation" TO "authenticated";
GRANT ALL ON TABLE "public"."snow_accumulation" TO "service_role";

GRANT ALL ON SEQUENCE "public"."snow_accumulation_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."snow_accumulation_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."snow_accumulation_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."weekly_forecasts" TO "anon";
GRANT ALL ON TABLE "public"."weekly_forecasts" TO "authenticated";
GRANT ALL ON TABLE "public"."weekly_forecasts" TO "service_role";

GRANT ALL ON SEQUENCE "public"."weekly_forecasts_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."weekly_forecasts_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."weekly_forecasts_id_seq" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
